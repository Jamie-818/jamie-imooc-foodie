<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>foodie</artifactId>
        <groupId>com.jamie</groupId>
        <version>1.0</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <artifactId>foodie-api</artifactId>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <dependencies>
        <!--
          api -> service -> mapper -> pojo -> common
            api可以使用service、pojo与common中相应方法
        -->
        <dependency>
            <groupId>com.jamie</groupId>
            <artifactId>foodie-service</artifactId>
            <version>1.0</version>
        </dependency>
    </dependencies>
    <build>
        <resources>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**.*</include>
                    <include>**/*.*</include><!-- i18n能读取到 -->
                    <include>**/*/*.*</include>
                </includes>
            </resource>
        </resources>
        <!--jar包名自定义
            ${project.artifactId}: 项目名
            ${project.version}: 项目版本号
            ${git.commit.id.abbrev}: git推送版本号缩写(默认7位，可通过配置abbrev进行修改，最长40位)
        -->
        <finalName>${project.artifactId}-${project.version}-${git.commit.id.abbrev}</finalName>
        <plugins>
            <!--spring构建插件-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <mainClass>com.foodie.api.ApiApplication</mainClass>
                </configuration>
            </plugin>
            <!--git-commit-id-plugin 插件，用于实现打包带git版本信息-->
            <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
                <version>4.0.0</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>revision</goal>
                        </goals>
                        <phase>initialize</phase>
                    </execution>
                </executions>
                <configuration>
                    <!--日期格式;默认值:dd.MM.yyyy '@' HH:mm:ss z;-->
                    <dateFormat>yyyy-MM-dd HH:mm:ss</dateFormat>
                    <!--,构建过程中,是否打印详细信息;默认值:false;-->
                    <verbose>true</verbose>
                    <!-- ".git"文件路径;默认值:${project.basedir}/.git;
                      注意： 如果是多模块(多模块)项目，则需要修改到.git文件夹的目录-->
                    <dotGitDirectory>${project.basedir}/../../.git</dotGitDirectory>
                    <!--
                          Default (optional):
                          git
                          Explanation:
                          This property will be used as the "namespace" prefix for all exposed/generated properties.
                          An example the plugin may generate the property `${configured-prefix}.commit.id`.
                          Such behaviour can be used to generate properties for multiple git repositories (see
                          https://github.com/git-commit-id/maven-git-commit-id-plugin/issues/137#issuecomment-418144756
                          for a full example).
                                      -->
                    <prefix>git</prefix>
                    <!--若项目打包类型为pom,是否取消构建;默认值:true;-->
                    <skipPoms>false</skipPoms>
                    <!--是否生成"git.properties"文件;默认值:false;-->
                    <generateGitPropertiesFile>true</generateGitPropertiesFile>
                    <!--指定"git.properties"文件的存放路径(相对于${project.basedir}的一个路径);
                    注意：该地址决定接口代码是否可以读取到git版本信息，请自行修改-->
                    <generateGitPropertiesFilename>./src/main/resources/git.properties</generateGitPropertiesFilename>
                    <!--选择输出的字段-->
                    <includeOnlyProperties>
                        <includeOnlyProperty>^git.build.time$</includeOnlyProperty>
                        <includeOnlyProperty>^git.commit.(id.abbrev|id|time)$</includeOnlyProperty>
                    </includeOnlyProperties>
                    <!--".git"文件夹未找到时,构建是否失败;若设置true,则构建失败;若设置false,则跳过执行该目标;默认值:true;-->
                    <failOnNoGitDirectory>true</failOnNoGitDirectory>
                    <!--git描述配置,可选;由JGit提供实现;-->
                    <gitDescribe>
                        <!--是否生成描述属性-->
                        <skip>false</skip>
                        <!--提交操作未发现tag时,仅打印提交操作ID,-->
                        <always>false</always>
                        <!--提交操作ID显式字符长度,最大值为:40;默认值:7;
                            0代表特殊意义;后面有解释;
                        -->
                        <abbrev>8</abbrev>
                        <!--构建触发时,代码有修改时(即"dirty state"),添加指定后缀;默认值:"";-->
                        <dirty>-dirty</dirty>
                        <!--always print using the "tag-commits_from_tag-g_commit_id-maybe_dirty" format, even if "on" a tag.
                            The distance will always be 0 if you're "on" the tag.
                        -->
                        <forceLongFormat>false</forceLongFormat>
                    </gitDescribe>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>