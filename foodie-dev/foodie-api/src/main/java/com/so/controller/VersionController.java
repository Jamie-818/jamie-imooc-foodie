package com.so.controller;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import org.springframework.core.io.ClassPathResource;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import lombok.extern.slf4j.Slf4j;

/**
 * 应用模块名称：
 * 
 * @author show
 * @since 2020/2/12 18:55
 */
@RestController
@Slf4j
public class VersionController {

    @GetMapping("/version")
    public String versionInformation() {
        return readGitProperties();
    }

    /**
     * @return A String containing the contents of the git.properties file as generated by the Maven build
     */
    private String readGitProperties() {
        ClassPathResource classPathResource = new ClassPathResource("git.properties");
        InputStream inputStream;
        try {
            inputStream = classPathResource.getInputStream();
        } catch (IOException e) {
            log.error("获取文件异常", e);
            return "获取文件异常";
        }
        try {
            return readFromInputStream(inputStream);
        } catch (IOException e) {
            log.error("获取版本异常", e);
            return "获取版本异常";
        }
    }

    /**
     * Read an input stream and convert it into a string
     * 
     * @param inputStream
     *            The input stream
     * @return The converted input stream as a String
     * @throws IOException
     *             When an error occurs reading the input stream
     */
    private String readFromInputStream(InputStream inputStream) throws IOException {
        StringBuilder resultStringBuilder = new StringBuilder();
        try (BufferedReader br = new BufferedReader(new InputStreamReader(inputStream))) {
            String line;
            while ((line = br.readLine()) != null) {
                resultStringBuilder.append(line).append("\n");
            }
        }
        return resultStringBuilder.toString();
    }

}
